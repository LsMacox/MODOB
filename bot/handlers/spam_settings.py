"""Spam settings handlers: manage spam limits via commands."""
from __future__ import annotations

import logging
from typing import Optional, List, Dict, Any

from sqlalchemy import select
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import CommandHandler, ContextTypes, BaseHandler, ConversationHandler, CallbackQueryHandler
from telegram.constants import ChatMemberStatus

from ..database import async_session
from ..models import GroupSetting
from .db_utils import ensure_group
from ..anti_spam import BAN_DURATIONS

logger = logging.getLogger(__name__)


async def show_spam_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show current spam settings for a specified group in private chat."""
    if not update.callback_query:
        return
        
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ user_data
    chat_id = context.user_data.get("selected_chat_id")
    if not chat_id:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞.")
        return
    
    async with async_session() as session:
        stmt = select(GroupSetting).where(GroupSetting.chat_id == chat_id)
        grp: Optional[GroupSetting] = await session.scalar(stmt)
        
        if not grp:
            await query.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        try:
            chat = await context.bot.get_chat(chat_id=chat_id)
            chat_title = chat.title
        except Exception:
            chat_title = f"ID: {chat_id}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç —Å–ø–∞–º–∞", callback_data=f"spam_limit:{chat_id}")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–ø–∞–º–∞", callback_data=f"spam_interval:{chat_id}")],
            [InlineKeyboardButton(f"{'üü¢' if grp.link_spam_enabled else 'üî¥'} –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞ —Å—Å—ã–ª–∫–∏", callback_data=f"link_spam_toggle:{chat_id}")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç —Å—Å—ã–ª–æ–∫", callback_data=f"link_spam_limit:{chat_id}")],
            [InlineKeyboardButton("–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"show_banned:{chat_id}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data=f"private:manage:{chat_id}")]
        ]
        
        settings_text = (
            f"üìä **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏-—Å–ø–∞–º–∞ –¥–ª—è {chat_title}:**\n\n"
            f"‚Ä¢ –õ–∏–º–∏—Ç —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π: {grp.spam_limit}\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π: {grp.spam_interval} —Å–µ–∫\n"
            f"‚Ä¢ –õ–∏–º–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π: {grp.repeat_limit}\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π: {grp.repeat_interval} —Å–µ–∫\n"
            f"‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞ —Å—Å—ã–ª–∫–∏: {'–í–∫–ª—é—á–µ–Ω–∞ ‚úÖ' if grp.link_spam_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå'}\n"
            f"‚Ä¢ –õ–∏–º–∏—Ç —Å—Å—ã–ª–æ–∫: {grp.link_spam_limit}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )
        
        await query.edit_message_text(
            settings_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )


# Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–ø–∞–º–∞
async def spam_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, override_data: str = None) -> None:
    """
    Handle callbacks for spam settings buttons in private chat.
    Callbacks: spam_limit:{chat_id}, spam_interval:{chat_id}, etc.
    
    Args:
        update: The update object
        context: The context object
        override_data: Optional override for callback data (used for programmatic calls)
    """
    if not update.callback_query:
        return
        
    query = update.callback_query
    await query.answer()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_query
    data = override_data or query.data
    if not data:
        return
    
    parts = data.split(":")
    if len(parts) < 2:
        return
        
    action = parts[0]
    try:
        chat_id = int(parts[1])
    except (ValueError, IndexError):
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ user_data
    context.user_data["selected_chat_id"] = chat_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    try:
        chat = await context.bot.get_chat(chat_id)
        chat_title = chat.title
    except Exception:
        chat_title = f"ID: {chat_id}"
    
    if action == "spam_limit":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Å–ø–∞–º–∞
        keyboard = []
        for value in [3, 5, 10, 15, 20]:
            keyboard.append([InlineKeyboardButton(
                f"{value}", 
                callback_data=f"set_spam_limit:{chat_id}:{value}")])
        
        keyboard.append([InlineKeyboardButton(
            "¬´ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", 
            callback_data=f"private:spam:{chat_id}")])
        
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {chat_title}:\n\n"
            "–ü–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞–±–∞–Ω–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif action == "spam_interval":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–ø–∞–º–∞
        keyboard = []
        for value in [30, 60, 120, 300, 600]:
            keyboard.append([InlineKeyboardButton(
                f"{value} —Å–µ–∫", 
                callback_data=f"set_spam_interval:{chat_id}:{value}")])
        
        keyboard.append([InlineKeyboardButton(
            "¬´ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", 
            callback_data=f"private:spam:{chat_id}")])
        
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {chat_title}:\n\n"
            "–≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–∏–º–∏—Ç–∞ —Å–ø–∞–º–∞.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif action == "set_spam_limit":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–ø–∞–º–∞
        if len(parts) < 3:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
            
        try:
            new_limit = int(parts[2])
            if new_limit < 1:
                await query.edit_message_text("–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
                
            async with async_session() as session:
                from .db_utils import ensure_group
                grp = await ensure_group(session, chat_id)
                grp.spam_limit = new_limit
                await session.commit()
                
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–ø–∞–º–∞
            await query.edit_message_text(
                f"‚úÖ –õ–∏–º–∏—Ç —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_limit}.\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º..."
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–ø–∞–º–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            from asyncio import sleep
            await sleep(1)
            await show_spam_settings(update, context)
            
        except ValueError:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            return
    
    elif action == "set_spam_interval":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–ø–∞–º–∞
        if len(parts) < 3:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
            
        try:
            new_interval = int(parts[2])
            if new_interval < 1:
                await query.edit_message_text("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
                
            async with async_session() as session:
                from .db_utils import ensure_group
                grp = await ensure_group(session, chat_id)
                grp.spam_interval = new_interval
                await session.commit()
                
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–ø–∞–º–∞
            await query.edit_message_text(
                f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_interval} —Å–µ–∫—É–Ω–¥.\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º..."
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–ø–∞–º–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            from asyncio import sleep
            await sleep(1)
            await show_spam_settings(update, context)
            
        except ValueError:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            return
    
    elif action == "show_banned":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat = await context.bot.get_chat(chat_id=chat_id)
            chat_title = chat.title
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∞–Ω—Ç–∏-—Å–ø–∞–º –º–æ–¥—É–ª—è
            from bot.anti_spam import get_banned_users
            banned_list = get_banned_users(chat_id)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_banned_list = []
            for ban_info in banned_list:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
                if 'user_id' not in ban_info or 'ban_until' not in ban_info:
                    logging.error(f"Missing required keys in ban_info: {ban_info}")
                    continue
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ API
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_info = await context.bot.get_chat_member(chat_id, ban_info['user_id'])
                    user = user_info.user
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç—á–∏–∫–µ –±–∞–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    ban_count = ban_info.get('ban_count', 1)
                    ban_duration = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    if ban_count > 0 and ban_count <= len(BAN_DURATIONS):
                        ban_seconds = BAN_DURATIONS[min(ban_count - 1, len(BAN_DURATIONS) - 1)]
                        if ban_seconds < 3600:  # –ú–µ–Ω—å—à–µ —á–∞—Å–∞
                            ban_duration = f"{ban_seconds // 60} –º–∏–Ω."
                        else:  # –ß–∞—Å –∏–ª–∏ –±–æ–ª—å—à–µ
                            ban_duration = f"{ban_seconds // 3600} —á–∞—Å."
                    
                    formatted_banned_list.append({
                        "user_id": ban_info['user_id'],
                        "username": user.username or "",
                        "first_name": user.first_name or "",
                        "ban_until": ban_info['ban_until'],
                        "ban_count": ban_count,
                        "ban_duration": ban_duration
                    })
                except Exception as e:
                    logging.error(f"Error getting user info: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ID
                    formatted_banned_list.append({
                        "user_id": ban_info['user_id'],
                        "username": "",
                        "first_name": f"ID: {ban_info['user_id']}",
                        "ban_until": ban_info['ban_until'],
                        "ban_count": ban_info.get('ban_count', 1),
                        "ban_duration": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    })
            
            banned_list = formatted_banned_list
            
            if not banned_list:
                # –ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                keyboard = [
                    [InlineKeyboardButton(
                        "¬´ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", 
                        callback_data=f"private:spam:{chat_id}"
                    )]
                ]
                
                await query.edit_message_text(
                    f"üîç –í –≥—Ä—É–ø–ø–µ {chat_title} –Ω–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞
            keyboard = []
            for banned in banned_list:
                import datetime
                ban_until = datetime.datetime.fromtimestamp(banned['ban_until']).strftime('%H:%M:%S')
                display_name = banned['first_name']
                if banned.get('username'):
                    display_name += f" (@{banned['username']})"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ –±–∞–Ω–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                ban_count = banned.get('ban_count', 1)
                ban_duration = banned.get('ban_duration', "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                keyboard.append([InlineKeyboardButton(
                    f"{display_name} [–î–æ {ban_until}] [–ë–∞–Ω #{ban_count}, {ban_duration}] ‚ùå", 
                    callback_data=f"unban_user:{chat_id}:{banned['user_id']}"
                )])
            
            keyboard.append([
                InlineKeyboardButton(
                    "¬´ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", 
                    callback_data=f"private:spam:{chat_id}"
                )
            ])
            
            message_text = f"üîí **–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ {chat_title}:**\n\n"
            for i, banned in enumerate(banned_list, 1):
                message_text += f"{i}. {banned['first_name']} (@{banned['username']})\n"
            
            message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:"
            
            await query.edit_message_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"Error showing banned users: {e}")
            await query.edit_message_text(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}"
            )
            return
    
    elif action == "unban_user":
        # –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if len(parts) < 3:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
            
        try:
            user_id = int(parts[2])
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                user_info = await context.bot.get_chat_member(chat_id, user_id)
                user = user_info.user
                user_name = f"{user.first_name} {user.last_name or ''}".strip()
                if user.username:
                    user_name += f" (@{user.username})"
            except Exception as e:
                user_name = f"ID: {user_id}"
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from ..anti_spam import unblock_user
            await unblock_user(chat_id, user_id, context)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º —Ä–∞–∑–±–∞–Ω–µ
            await query.edit_message_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω.\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º..."
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–ø–∞–º–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            from asyncio import sleep
            await sleep(1)
            await show_spam_settings(update, context)
            
        except Exception as e:
            logger.error(f"Error unbanning user: {e}")
            await query.edit_message_text(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"
            )
            return
            
    elif action == "link_spam_toggle":
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞ —Å—Å—ã–ª–∫–∏
        try:
            async with async_session() as session:
                stmt = select(GroupSetting).where(GroupSetting.chat_id == chat_id)
                grp: Optional[GroupSetting] = await session.scalar(stmt)
                
                if grp:
                    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    grp.link_spam_enabled = not grp.link_spam_enabled
                    await session.commit()
                    
                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    status = "–≤–∫–ª—é—á–µ–Ω–∞" if grp.link_spam_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
                    await query.answer(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞ —Å—Å—ã–ª–∫–∏ {status}.")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–ø–∞–º–∞
                    await show_spam_settings(update, context)
                else:
                    await query.answer("–û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            
        except Exception as e:
            logger.error(f"Error toggling link spam: {e}")
            await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    elif action == "link_spam_limit":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Å—Å—ã–ª–æ–∫
        try:
            async with async_session() as session:
                stmt = select(GroupSetting).where(GroupSetting.chat_id == chat_id)
                grp: Optional[GroupSetting] = await session.scalar(stmt)
                
                if grp:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–∏–º–∏—Ç–∞
                    keyboard = []
                    for value in [1, 2, 3, 5, 10]:
                        keyboard.append([InlineKeyboardButton(
                            f"{value}", 
                            callback_data=f"set_link_spam_limit:{chat_id}:{value}")])
                    
                    keyboard.append([InlineKeyboardButton(
                        "¬´ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", 
                        callback_data=f"private:spam:{chat_id}")])
                    
                    await query.edit_message_text(
                        f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç —Å—Å—ã–ª–æ–∫: {grp.link_spam_limit}\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã:\n"
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏ "
                        "–≤ —Ç–µ—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–ø–∞–º–∞.",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    await query.answer("–û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        except Exception as e:
            await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    elif action == "set_link_spam_limit":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Å—Å—ã–ª–æ–∫
        if len(parts) < 3:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
            
        try:
            new_limit = int(parts[2])
            if new_limit < 1:
                await query.edit_message_text("–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
                
            async with async_session() as session:
                from .db_utils import ensure_group
                grp = await ensure_group(session, chat_id)
                grp.link_spam_limit = new_limit
                await session.commit()
                
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–ø–∞–º–∞
            await query.edit_message_text(
                f"‚úÖ –õ–∏–º–∏—Ç —Å—Å—ã–ª–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_limit}.\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º..."
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–ø–∞–º–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            from asyncio import sleep
            await sleep(1)
            await show_spam_settings(update, context)
            
        except ValueError:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            return


def get_spam_settings_handlers() -> List[BaseHandler]:
    """Return all handlers for spam settings."""
    return [
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–ø–∞–º–∞
        CallbackQueryHandler(spam_settings_callback, pattern=r"^(spam_limit|spam_interval|set_spam_limit|set_spam_interval|link_spam_toggle|link_spam_limit|set_link_spam_limit|show_banned|unban_user):"),
    ]
